import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Perceptron
i = load_iris()
X = i.data[:, [2, 3]]  # petal length and petal width
y = i.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
ppn = Perceptron(eta0=0.1, random_state=0)
ppn.fit(X_train, y_train)
accuracy = ppn.score(X_test, y_test)
print('Accuracy:', accuracy)
# Plot the data points
plt.scatter(X_train[y_train == 0, 0], X_train[y_train == 0, 1], color='red', marker='o', label='setosa')
plt.scatter(X_train[y_train == 1, 0], X_train[y_train == 1, 1], color='blue', marker='x', label='versicolor')
plt.xlabel('Petal length')
plt.ylabel('Petal width')
plt.legend()
# Plot the separating line
x_min, x_max = X_train[:, 0].min() - 1, X_train[:, 0].max() + 1
y_min, y_max = X_train[:, 1].min() - 1, X_train[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1), np.arange(y_min, y_max, 0.1))
Z = ppn.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.1, cmap=plt.cm.brg)
plt.xlim(xx.min(), xx.max())
plt.ylim(yy.min(), yy.max())
plt.title('Perceptron decision boundary')
plt.show()
